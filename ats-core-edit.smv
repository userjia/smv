--===================================main
MODULE main
	VAR
		enviroment:Enviroment(ats.actuator);
		ats:ATS(enviroment.ev);

--===================================main-end

--===================================
MODULE Enviroment(actuator)
	VAR
		barrier:{0,1};
		parallel:{0,1};
		around:{garage,line,no_sign};
		tar_x:{0,1};
		tar_y:{0,1};
		car_speed:{-1,0,1};
		car_wheelAngle:{-1,0,1};
		i:{0,1,2,3};
	DEFINE
		barrier_seq:=[1,1,1];
		ev:=[barrier,parallel,around,tar_x,tar_y,car_wheelAngle,car_speed];
		complete:=(tar_x=0&tar_y=0);
	ASSIGN
		init(barrier):=barrier_seq[0];
		init(light):=1;
		init(around):=line;
		init(tar_x):=1;
		init(tar_y):=1;
		init(i):=0;
		init(car_speed):=0;
		init(car_wheelAngle):=0;

		next(barrier):=
		case
			i!=3:barrier_seq[i];
			--can eventually success
			i=3:0;
			TRUE:barrier;
		esac;

		next(i):=
		case
			i=0:1;
			i=1:2;
			i=2:3;
			TRUE:i;
		esac;

		next(tar_y):=
		case
			car_speed=0:tar_y;
			(tar_y=1)&(car_speed=1)&(car_wheelAngle=1)&(i=2|i=3):0;
			TRUE:tar_y;
		esac;
		
		next(tar_x):=
		case
			car_speed=0:tar_x;
			(tar_x=1)&(car_speed=1)&(car_wheelAngle=1)&(i=2|i=3):0;
			TRUE:tar_x;
		esac;

		next(car_speed):=
		case
			actuator[1]=0:car_speed;
			actuator[1]=1:1;
			actuator[2]=1:0;
			TRUE:car_speed;
		esac;

		next(car_wheelAngle):=
		case
			actuator[0]=0:car_wheelAngle;
			actuator[0]=1:1;
			TRUE:car_wheelAngle;
		esac;

--===================================

--===================================ats
MODULE ATS(ev)
	VAR
		sensor_ultrasonic:Ultrasonic(ev);
		sensor_around:AroundCamera(ev);
		sensor_eye:DoubleEyeCamera(ev);
		sensor_speed:WheelSpeed(ev);

		actuator_steerWheel:SteerWheel(ctl_sys.steerWheel);
		actuator_engine:Engine(ctl_sys.engine);
		actuator_brake:Brake(ctl_sys.brake);
		actuator_gear:Gear(ctl_sys.gear);

		cpt_sys:ComputeSystem(sensor_ultrasonic.out,sensor_around.out,sensor_eye.out,can.in);
		can:CanBus(cpt_sys.can_out,sensor_speed.out);
		ctl_sys:ControlSystem(can.out);
		--can.in=speed_signal
	DEFINE
		actuator:=[actuator_steerWheel.out,actuator_engine.out,actuator_brake.out,actuator_gear.out];

--===================================ats-end

--===================================
MODULE ComputeSystem(ultrasonic_signal,around_signal,eye_signal,can_in)
	VAR
		board_TX1:TX1(eye_signal);
		board_I2C:I2C(board_TX1.I2C_out);
		board_Rcar:Rcar(ultrasonic_signal,around_signal,board_I2C.out,can_in);
	DEFINE
		can_out:=board_Rcar.can_out;
--===================================

--===================================
MODULE ControlSystem(input)
	DEFINE
		out:=input;
		steerWheel:=input[0];
		engine:=input[1];
		brake:=input[2];
		gear:=input[3];

--===================================

--===================================
MODULE TX1(input_signal)
	VAR
		target:comp_double(input_signal);

	DEFINE
		I2C_out:=target.out;

--===================================

--===================================
MODULE Rcar(ultrasonic_signal,around_signal,I2C_input,can_in)
	VAR
		ultrasonic:comp_ultrasonic(ultrasonic_signal);
		around:comp_around(around_signal);
		stop:comp_stop(ultrasonic.out,can.in);
		plan:comp_plan(ultrasonic.out,around.out,I2C_input,can_in);

		--I2C_input=eye_signal

		cmd_brake:{1,0};
		
	DEFINE
		can_out:=[cmd_angle,cmd_speed,cmd_brake,cmd_gear,flag];
		flag:=plan.flag;
		cmd_speed:=plan.Ve;
		--[3]
		cmd_angle:=plan.plan_point;
		cmd_gear:=flag[0];
	ASSIGN
		init(cmd_brake):=0;

		next(cmd_brake):=
		case
			(stop.packetStop[2]=2):1;
			TRUE:cmd_brake;
		esac;

--===================================
--compute
--===================================
MODULE comp_plan(ultrasonic_info,around_info,eye_info,can.in)
	VAR	
		--stop enviroment
		garage:{0,1};
		line:{0,1};
		
		gear:{-1,0,1};
		--if stop when reach end point
		plan_stop:{0,1};
		--if follow the road line
		followLine:{0,1};
		tinyAdjust:{-1,0,1};
		
	DEFINE
		Ve:=can.in[0];
		tar_pos:=eye_info;
		Xe:=tar_pos[0];
		Ye:=tar_pos[1];
		plan_point:=[Xe,Ye];
		parallel:=around_info[0];
		flag:=[gear,plan_stop,followLine,parallel,tinyAdjust];
		--compute the cmd to ctl;
		plan_ctl:comp_ctl(plan_point);
	ASSIGN
		
		init(gear):=0;
		init(plan_stop):=0;
		init(followLine):=0;
		init(tinyAdjust):=0;
		init(garage):=0;
		init(line):=0;
		
		next(garage):=
		case
			around_info[1]=isGarage:1;
			TRUE:garage;
		esac;
		
		next(line):=
		case
			around_info[1]=isLine:1;
			TRUE:line;
		esac;
		
		next(gear):=
		case
			ultrasonic_info=1:-1;
			(Xe!=0)&(Ye!=0):1;
			(Xe=0)&(Ye=0):0;
			TRUE:gear;
		esac;

		next(plan_stop):=
		case
			(Xe=0)&(Ye=0):1;
			TRUE:0;
		esac;
		
		next(followLine):=
		case
			(line!=0)&(garage!=0):1;
			TRUE:0;
		esac;
		
		next(tinyAdjust):=
		case
			(ultrasonic_info=1)|(parallel=0):1;
			TRUE:tinyAdjust;
		esac;

MODULE comp_ctl(plan_point,can_in)
	VAR
		PID1:runDis();
		angle:runAngle();
		curve:getCurve();
		PID2:cross();
		--[3]
		steerWheel;
	DEFINE
		--??
		forecase_dis:=1;
		PID:=[PID1,PID2];
		--??
		gear:=1;
		speed:=can_in[0];
		control:[steerWheel,speed,gear];
		
		
MODULE comp_stop(ultrasonic_info,can_in)
	VAR
		-- state flag, 0 normal, 1 speed down, 2 stop
		isStop:{0,1,2};
	DEFINE
		--the target speed;
		velo:=can.in[0];
		packetStop:=[velo,isStop];
		
	ASSIGN
		init(isStop):=0;

		next(isStop):=
		case
			(ultrasonic_info=1):2;
			TRUE:isStop;
		esac;
		
		
MODULE comp_ultrasonic(input)
	DEFINE
		out:=input;

MODULE comp_double(input)
	DEFINE
		out:=input;

MODULE comp_around(input)
	DEFINE
		--light:input[0];
		--scene:input[1];
		out:=input;

--===================================
--bus
--===================================
MODULE I2C(input)
	DEFINE
		out:=input;

MODULE CanBus(input,speed)
	DEFINE
		out:=input;
		in:=[speed];

--===================================
--sensor
--===================================
MODULE Ultrasonic(ev)
	DEFINE
		out:=ev[0];

MODULE AroundCamera(ev)
	DEFINE
		out:=[ev[1],ev[2]];

MODULE DoubleEyeCamera(ev)
	DEFINE
		out:=[ev[3],ev[4]];

MODULE WheelSpeed(ev)
	DEFINE
		out:=ev[6];

--===================================
--actuator
--===================================
MODULE SteerWheel(input)
	DEFINE
		out:=input;

MODULE Engine(input)
	DEFINE
		out:=input;

MODULE Brake(input)
	DEFINE
		out:=input;
		
MODULE Gear(input)
	DEFINE
		out:=input;

--===================================

/--
1.目前所用的tar_pos和car_pos都是环境中的dis和angle，为1时表示彼此有距离
2.stop模块中的减速尚未使用
3.新使用的x,y式角度未具体分析测试
--/
